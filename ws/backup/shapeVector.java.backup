import java.awt.List;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import javax.swing.text.AbstractDocument.BranchElement;

import com.google.common.collect.Range;
import com.sun.org.apache.xerces.internal.util.Status;

import analysis.ForwardAnalysis;
import ast.ASTNode;
import ast.AssignStmt;
import ast.EDivExpr;
import ast.EQExpr;
import ast.ETimesExpr;
import ast.Expr;
import ast.FPLiteralExpr;
import ast.ForStmt;
import ast.GEExpr;
import ast.GTExpr;
import ast.IntLiteralExpr;
import ast.LEExpr;
import ast.LTExpr;
import ast.MDivExpr;
import ast.MTimesExpr;
import ast.MinusExpr;
import ast.NEExpr;
import ast.Name;
import ast.NameExpr;
import ast.NotExpr;
import ast.ParameterizedExpr;
import ast.PlusExpr;
import ast.RangeExpr;
import ast.Script;
import ast.ShortCircuitAndExpr;
import ast.ShortCircuitOrExpr;
import ast.Stmt;
import ast.StringLiteralExpr;
import natlab.toolkits.path.BuiltinQuery;
import natlab.toolkits.rewrite.threeaddress.LeftThreeAddressRewrite;
import sun.launcher.resources.launcher_de;
import natlab.tame.builtin.Builtin.Var;
import natlab.toolkits.BuiltinSet;


/*
 * Shape analysis
 * 
 * Consider:
 *   1:step:n
 *   iteration after loop may be: 1) [1,1] 2) []
 * 
 * Restrictions:
 *   no redefinition is allowed (assigned once)
 *   or
 *   shape not changed after next assignments
 */

public class shapeVector extends ForwardAnalysis<Set<infoDim>> {
	public shapeVector(ASTNode tree, String name){
		super(tree);
		ScriptName = name; //set script name, if in script mode
//		System.out.println("new name: " + createInputArgs(name));
		createInput(name);
		initialBuiltinGroups();
	}
	
	private Set<Stmt> skip = new HashSet<>();
	private Map<String, infoDim> shapeInfo = new HashMap<>();
	private BuiltinQuery query = BuiltinSet.getBuiltinQuery();
	private String ScriptName = "";
	public Map<String, Map<String, infoDim>> allShapeInfo = new HashMap<>();
	public ArrayList<String> methodList = new ArrayList<>();
	private Map<String, ArrayList<infoDim>> inputList = new HashMap<>();

	// (6)
	@Override
	public Set<infoDim> newInitialFlow() {
		return new HashSet<>();
	}

	@Override
	public Set<infoDim> copy(Set<infoDim> src) {
		return new HashSet<>(src);
	}

	@Override
	public Set<infoDim> merge(Set<infoDim> in1, Set<infoDim> in2) {
		Set<infoDim> out = new HashSet<>(in1);
		out.addAll(in2);
		return out;
	}
	
	// case methods
	@Override
	public void caseASTNode(ASTNode node) {
		// TODO Auto-generated method stub
		for (int i = 0; i < node.getNumChild(); i++) {
			node.getChild(i).analyze(this);
		}
	}
	
	/*
	 * Need initialization before
	 *   processing different functions
	 */
	@Override
	public void caseFunction(ast.Function node) {
		String fname = node.getName().getVarName();
		shapeInfo = new HashMap<>();
		skip = new HashSet<>();
		methodList.add(fname);
		processParameter(node, inputList.get(fname));
		caseASTNode(node);
		printFinal();
		allShapeInfo.put(fname, shapeInfo);
	}
	
	@Override
	public void caseScript(Script node){
		caseASTNode(node);
		printFinal();
		allShapeInfo.put(ScriptName, shapeInfo);
	}
	
	@Override
	public void caseAssignStmt(AssignStmt node){
		if(skip.contains(node)) return;
//		System.out.println("here = " + node.getPrettyPrinted());
		
		infoDim rtn = walkExpr(node);
		
//		inFlowSets.put(node, copy(currentInSet));
//	    
//	    // out = in
//	    currentOutSet = copy(currentInSet);
//	    // out = out - kill
//	    currentOutSet.removeAll(kill(node));
//	    // out = out + gen
//	    currentOutSet.addAll(gen(node));
//
//	    outFlowSets.put(node, copy(currentOutSet));
	    
		skip.add(node);
	}
	
	/*
	 * Iteration may be empty after loop []
	 *   for example, 3:2  --> empty
	 *   (deprecated with decideDimRange)
	 */
	@Override
	public void caseForStmt(ForStmt node){
		String iter = node.getAssignStmt().getLHS().getVarName();
		caseASTNode(node);
		infoDim old = shapeInfo.get(iter);
//		old.setDimUnknown();
//		old.setDim2(1, 1);
//		System.out.println("hello:::" + old.toString());
		shapeInfo.put(iter, old);
	}
	
	infoDim walkExpr(AssignStmt node){
		System.out.println(node.getPrettyPrinted() + " --> " + node.dumpString());
		Expr exprleft = node.getLHS();
		String varname = "";
		infoDim rtn = new infoDim();
		boolean indexass = false; //index assignment
		if(exprleft instanceof ParameterizedExpr){
			ParameterizedExpr p = (ParameterizedExpr) exprleft;
			varname = p.getVarName();
			indexass = true;
		}
		else {
			varname = ((NameExpr)exprleft).getVarName();
		}
		rtn.setDim(evalExpr(node.getRHS()));
		rtn.setName(varname); //set name
		System.out.println("--> " + rtn.toString());
		if(indexass){
			infoDim ltn = new infoDim(varname);
			ltn.setDim(evalExpr(exprleft)); //evaluate left
			if(!ltn.equals(rtn)){ //compare left and right
				saveVarInfo(varname, rtn); //set to unknown
			}
		}
		else saveVarInfo(varname, rtn); //save variable
		return rtn;
	}
	
	/*
	 * one operand : decideDim(e, rhd), not(~)
	 * two operands: decideDim(e, lhd, rhd), + - ...
	 *       range : 1:n
	 * 
	 */
	infoDim evalExpr(Expr e){
		infoDim rtn = new infoDim();
		int ChildNum = e.getNumChild();
//		System.out.println(e.getPrettyPrinted() + " --> " + e.dumpString() + " num = " + ChildNum);
		
		if(ChildNum < 2){
			if(e instanceof IntLiteralExpr || e instanceof FPLiteralExpr){
				rtn.setDim2(1,1);
			}
			else if(e instanceof StringLiteralExpr){
				int v = ((StringLiteralExpr)e).getValue().length();
				rtn.setDim2(1, v);
			}
			else if(e instanceof NameExpr){
				String n = ((NameExpr)e).getVarName();
				if(shapeInfo.containsKey(n)){
					rtn.setDim(shapeInfo.get(n));
				}
				else {
					// unknown
				}
			}
			else { // one child
				infoDim rhd = evalExpr((Expr) (e.getChild(0)));
				rtn.setDim(decideDim(e, rhd)); // one operand
//				System.out.println("special -- " + e.getPrettyPrinted() + " : " + e.dumpString());
			}
		}
		else if (e instanceof ParameterizedExpr) {
			ParameterizedExpr pe = (ParameterizedExpr) e;
			String leftname = pe.getVarName();
			
			if(shapeInfo.containsKey(leftname)){
				ArrayList<infoDim> dlist = new ArrayList<infoDim>();
				for(Expr te : pe.getArgList()){
					infoDim lhd = evalExpr(te);
					dlist.add(lhd);
				}
				rtn.setDim(decideDimIndex(leftname, dlist));
			}
			else if (query.isBuiltin(leftname)) {
				// built-in function
				rtn.setDim(decideDimBuiltin(pe));
			}
			else {
				// user-defined function
			}
		}
		else if (ChildNum == 2){
			infoDim lhd = evalExpr((Expr) (e.getChild(0)));
			infoDim rhd = evalExpr((Expr) (e.getChild(1)));
			rtn.setDim(decideDim(e, lhd, rhd));
		}
		else if (e instanceof RangeExpr){ // # of children is 3
//			infoDim lhd = evalExpr((Expr) (e.getChild(0)));
//			infoDim rhd = evalExpr((Expr) (e.getChild(2)));
////			rtn.setDim(decideDim(e, lhd, rhd));
//			rtn.setDim(decideDimRange(e, lhd, rhd));
			rtn.setDim2(1, 1); // maybe empty (0,0) if 3:2
		}
		else {
			// special node
			System.out.println("warning: there are " + e.getNumChild() + " nodes. (>2)");
//			System.out.println(e.getChild(0).getPrettyPrinted() + " --> " + e.getChild(0).dumpString());
//			System.out.println(e.getChild(2).getPrettyPrinted() + " --> " + e.getChild(2).dumpString());
		}
		
//		System.out.println(e.getPrettyPrinted() + " --> " + e.dumpString() + " : " + rtn.toString());
		
		
//		System.out.println("total " + e.getNumChild());
//		System.out.println("----- " + e.getChild(1).getNumChild());
//		for(int i=0;i<e.getNumChild();i++){
//			System.out.println("child " + e.getChild(i).dumpString());
//		}
		
		return rtn;
	}
	
	// dim rule
	infoDim decideDim(Expr e, infoDim lhd, infoDim rhd){
		infoDim rtn = new infoDim();
		// + - .* ./
		if(e instanceof PlusExpr || e instanceof MinusExpr
				|| e instanceof ETimesExpr
				|| e instanceof EDivExpr){
			rtn.setDim(decideDimExpr0(lhd,rhd));
		}
		else if(e instanceof MTimesExpr){ // *
			rtn.setDim(decideDimExpr1(lhd,rhd,1));
		}
		else if(e instanceof MDivExpr){ // /
			rtn.setDim(decideDimExpr1(lhd,rhd,2));
		}
		else if(e instanceof LTExpr
				|| e instanceof GTExpr
				|| e instanceof LEExpr
				|| e instanceof GEExpr
				|| e instanceof EQExpr
				|| e instanceof NEExpr){
			// < > <= >= = ~=
			rtn.setDim(decideDimExpr0(lhd,rhd)); // same as + -
		}
		else if(e instanceof ShortCircuitAndExpr
				|| e instanceof ShortCircuitOrExpr){
			// && ||
			rtn.setDim(decideDimExpr0(lhd,rhd)); // same as + -
		}
		return rtn;
	}
	
	infoDim decideDim(Expr e, infoDim rhd){
		infoDim rtn = new infoDim();
		if(e instanceof NotExpr){
			rtn.setDim(rhd);
		}
		return rtn;
	}
	
	/*
	 * Decide shapes
	 *   +, -, .*, ./
	 */
	infoDim decideDimExpr0(infoDim lhd, infoDim rhd){
		infoDim rtn = new infoDim();
		if(lhd.getStatus()==1){
			if(rhd.getStatus()==1)
				rtn.setDim(infoDim.decideInfoA1(lhd, rhd));
			else if(rhd.getStatus()==2)
				rtn.setDim(infoDim.decideInfoA2(lhd, rhd));
		}
		else if(lhd.getStatus()==2){
			if(rhd.getStatus()==1)
				rtn.setDim(infoDim.decideInfoA2(rhd, lhd));
			else if(rhd.getStatus()==2)
				rtn.setDim(infoDim.decideInfoA3(lhd, rhd));
		}
		return rtn;
	}
	
	infoDim decideDimExpr1(infoDim lhd, infoDim rhd, int op){
		infoDim rtn = new infoDim();
		if(lhd.getStatus()==1){
			if(rhd.getStatus()==1)
				rtn.setDim(infoDim.decideInfoB1(lhd, rhd, op));
			else if(rhd.getStatus()==2)
				rtn.setDim(infoDim.decideInfoB2(lhd, rhd, op));
		}
		else if(lhd.getStatus()==2){
			if(rhd.getStatus()==1)
				rtn.setDim(infoDim.decideInfoB2(rhd, lhd, op));
			else if(rhd.getStatus()==2)
				rtn.setDim(infoDim.decideInfoB3(lhd, rhd, op));
		}
		return rtn;
	}
	
	/*
	 * Decide range (deprecated)
	 *   1:n
	 */
	infoDim decideDimRange(Expr e, infoDim lhd, infoDim rhd){
		infoDim rtn = new infoDim();
		if(lhd.isScalar() && rhd.isScalar()){
			Expr e0 = (Expr)(e.getChild(0));
			Expr e2 = (Expr)(e.getChild(2));
			String left = e0.getNodeString();
			String right= e2.getNodeString();
			if(e0 instanceof IntLiteralExpr){
				if(e2 instanceof IntLiteralExpr){
					int v = Integer.parseInt(right) - Integer.parseInt(left) + 1;
					rtn.setDim2(1, v);
				}
				else if(left.equals("1")){
					rtn.setDim2("1", right);
				}
				else {
					String s = right + "-" + left + "1";
					rtn.setDim2("1", s);
				}
			}
			else {
				String s = right + "-" + left + "1";
				rtn.setDim2("1", s);
			}
		}
		return rtn;
	}
	
	public Map<String, Integer> BuiltinGroup1 = new HashMap<>();
	public String[] StringGroup1 = {"zeros","ones","eye","rand","randn"};
	public Map<String, Integer> BuiltinGroup2 = new HashMap<>();
	public String[] StringGroup2 = {"sqrt","exp","log","log10","log2","pow2","abs",
			"ceil","floor","round",
			"sin","cos","tan","asin","acos","atan"};
	public Map<String, Integer> BuiltinGroup3 = new HashMap<>();
	public String[] StringGroup3 = {"sum","max","min","mean","std","prod","median"};
	
	private void initialBuiltinGroups(){
		for(int i=0;i<StringGroup1.length;i++){
			BuiltinGroup1.put(StringGroup1[i], i);
		}
		for(int i=0;i<StringGroup2.length;i++){
			BuiltinGroup2.put(StringGroup2[i], i);
		}
		for(int i=0;i<StringGroup3.length;i++){
			BuiltinGroup3.put(StringGroup3[i], i);
		}
	}
	
	/*
	 * length: return max length dim
	 * size: return shape
	 */
	infoDim decideDimBuiltin(ParameterizedExpr e){
		String name = e.getVarName();
		infoDim rtn = new infoDim();
		ast.List<Expr> vars = e.getArgList();
		int len = vars.getNumChild();
		if(BuiltinGroup1.containsKey(name)){
			System.out.println("len = " + len);
			if(len==1){
				Expr e0 = vars.getChild(0);
				if(e0 instanceof IntLiteralExpr){
					int v = Integer.parseInt(getExprIndex(e0));
					rtn.setDim2(v,v);
				}
				else if(e0 instanceof NameExpr){
					String s = getExprIndex(e0);
					rtn.setDim2(s, s);
				}
			}
			else if(len==2){
				Expr e0 = vars.getChild(0);
				Expr e1 = vars.getChild(1);
				if(e0 instanceof IntLiteralExpr && e1 instanceof IntLiteralExpr){
					int v0 = Integer.parseInt(getExprIndex(e0));
					int v1 = Integer.parseInt(getExprIndex(e1));
					rtn.setDim2(v0,v1);
				}
				else if((e0 instanceof IntLiteralExpr || e0 instanceof NameExpr)
						&& (e1 instanceof IntLiteralExpr || e1 instanceof NameExpr)){
					String s0 = getExprIndex(e0);
					String s1 = getExprIndex(e1);
					rtn.setDim2(s0,s1);
				}
			}
		}
		else if(BuiltinGroup2.containsKey(name)){
			if(len==1){
				infoDim rhd = evalExpr(vars.getChild(0));
				rtn.setDim(rhd);
			}
		}
		else if(BuiltinGroup3.containsKey(name)){
			if(len==1){
				infoDim rhd = evalExpr(vars.getChild(0));
				rtn.setDim(rhd.getDimSum()); //special
			}
		}
		else if(name.equals("input")){
			rtn.setDim2(1,1);
		}
		else if(name.equals("size")){
			if(len==1){
				infoDim rhd = evalExpr(vars.getChild(0));
				rtn.setDim(rhd.getDimSize()); //special
			}
		}
		else if(name.equals("length") || name.equals("ndims") || name.equals("det")){
			if(len==1){
				infoDim rhd = evalExpr(vars.getChild(0));
				rtn.setDim(rhd.getDimMax()); //special
			}
		}
		//System.out.println("name = " + name + " : " + rtn.toString());
		return rtn;
	}
	
	infoDim decideDimIndex(String name, ArrayList<infoDim> dlist){
		infoDim rtn = new infoDim();
		infoDim val = shapeInfo.get(name); // check dim match??
		if(dlist.size() == 1){ // follow index
			rtn.setDim(dlist.get(0));
		}
		else {
			int[] arr = new int[99]; // max dims
			int arrx = 0;
			boolean f = true;
			for(infoDim x : dlist){
				if(x.status == 1){
					arr[arrx] = x.getLength();
					arrx++;
				}
				else {
					f = false;
					break;
				}
			}
			if(f) {
				rtn.setDim(arrx, 1, arr);
			}
		}
		return rtn;
	}
	
	/*
	 * Copy from autoVector.java
	 */
	private String getExprIndex(Expr x) {
		String rtn = "";
		if (x instanceof ast.IntLiteralExpr) {
			rtn = ((IntLiteralExpr) x).getValue().getValue().toString();
		} else if (x instanceof ast.NameExpr) {
			rtn = ((NameExpr) x).getVarName();
		}
		return rtn;
	}
	
	/*
	 * If variable is redefined,
	 *   the value is cleared to be unknown
	 * else
	 *   insert new <key, value>
	 */
	private void saveVarInfo(String name, infoDim x){
		if(shapeInfo.containsKey(name)){
			infoDim old = shapeInfo.get(name);
			if(!old.equals(x)) {
				System.out.println("warning : variable " + name + " is redefined.");
				System.out.println(old.toString());
				System.out.println(x.toString());
				old.setDimUnknown();
				shapeInfo.put(name, old);
			}
		}
		else shapeInfo.put(name, x);
	}
	
	public void printFinal(){
		printV(shapeInfo);
	}

	private void printV(Map<String, infoDim> x) {
		int n = 0;
		System.out.println("--Set--infoDim--");
		for (Map.Entry<String, infoDim> s : x.entrySet()) {
			System.out.println(n + ": " + s.getKey());
			System.out.println("\t" + s.getValue().toString());
			n++;
		}
		System.out.println("----------------");
	}
	
	public ArrayList<String> getMethodList(){
		printList(methodList);
		return methodList;
	}
	
	private void printList(ArrayList<String> x){
		int n = 0;
		for(String v : x){
			System.out.println("function[" + n + "] : " + v);
			n++;
		}
		System.out.println("--end--of--printList--");
	}
	
	private void processParameter(ast.Function node, ArrayList<infoDim> DimList){
		int len = node.getInputParamList().getNumChild();
		if (len > 0) {
			System.out.println("Read args for function <" + node.getName().getVarName() + ">");
			if(len != DimList.size()){
				System.out.println("** Not enough input parameters (" + len + " vs. " + DimList.size() + ") **");
				System.exit(0);
			}
			int indx = 0;
			for (Name n : node.getInputParamList()) {
				infoDim t = new infoDim(n.getVarName());
				t.setDim(DimList.get(indx));
				System.out.println(n.getVarName() + " ==> " + DimList.get(indx).toString());
				shapeInfo.put(n.getVarName(), t);
				indx++;
			}
			System.out.println("--parameter--");
		}
	}
	
	/*
	 * Add `ext` after `.m` file
	 */
	private String createInputArgs(String fname) {
		int x = fname.lastIndexOf(".m");
		String rtn = "";
		String ext = "_args.txt";
		if(x < 0){
			rtn = fname + ext;
		}
		else {
			rtn = fname.substring(0, x) + ext;
		}
		return rtn;
	}
	
	/*
	 * Input file should be put on the same directory
	 *   as the `.m` file
	 */
	private void createInput(String fname){
		try {
			BufferedReader br = new BufferedReader(new FileReader(createInputArgs(fname)));
			String line = br.readLine();
			processLine(line);
			br.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
//			e.printStackTrace();
			// do nothing
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	/*
	 * args[0]: function name
	 * args[1]: # of parameters
	 * args[2]: rank of first parameter
	 * args[3..]: dims of first parameter
	 * ...: next parameters
	 */
	private void processLine(String ln){
		String[] args = ln.split(" ");
		int num = Integer.parseInt(args[1]);
		ArrayList<infoDim> val = new ArrayList<>();
		int indx = 2;
		for(int i=0;i<num;i++){
			int v = Integer.parseInt(args[indx]); indx++;
			int[] va= new int[v+1]; // v may be 0
			infoDim d = new infoDim();
			for(int j=0;j<v;j++){
				va[j] = Integer.parseInt(args[indx+j]);
			}
			indx += v;
			d.setDim(v, 1, va);
//			System.out.println(d.toString());
			val.add(d);
		}
		inputList.put(args[0], val); //save into list
	}
	
	/*
	 * Get range for for statement
	 *   learn from decideDimRange
	 */
	public infoDim getForRange(Expr arg){
		infoDim rtn = new infoDim();
		if(!(arg instanceof RangeExpr)) return rtn;
		RangeExpr e = (RangeExpr)arg;
		infoDim lhd = evalExpr(e.getLower()); //eval left
		infoDim rhd = evalExpr(e.getUpper()); //eval right
		if(lhd.isScalar() && rhd.isScalar()){
			Expr e0 = (Expr)(e.getChild(0));
			Expr e2 = (Expr)(e.getChild(2));
			String left = e0.getNodeString();
			String right= e2.getNodeString();
			if(e0 instanceof IntLiteralExpr){
				if(e2 instanceof IntLiteralExpr){
					int v = Integer.parseInt(right) - Integer.parseInt(left) + 1;
					rtn.setDim2(1, v);
				}
				else if(left.equals("1")){
					rtn.setDim2("1", right);
				}
				else {
					String s = right + "-" + left + "1";
					rtn.setDim2("1", s);
				}
			}
			else {
				String s = right + "-" + left + "1";
				rtn.setDim2("1", s);
			}
		}
		return rtn;
	}
	
	public boolean isBuiltin(String name){
		return query.isBuiltin(name);
	}
}
